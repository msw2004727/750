<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI 審問遊戲</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Sans+TC:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Noto Sans TC', 'Inter', sans-serif;
            background-color: #1a202c;
            color: #e2e8f0;
            overscroll-behavior-y: contain;
        }
        .card {
            background-color: #2d3748;
            border-radius: 8px;
            padding: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        .dialogue-area {
            flex-grow: 1;
            overflow-y: auto;
            border: 1px solid #4a5568;
            padding: 10px;
            border-radius: 8px;
            background-color: #1f2937;
            min-height: 200px;
        }
        .dialogue-bubble {
            padding: 8px 12px;
            border-radius: 15px;
            margin-bottom: 8px;
            max-width: 85%;
            word-wrap: break-word;
        }
        .player-bubble {
            background-color: #4299e1;
            color: white;
            margin-left: auto;
            text-align: right;
        }
        .ai-bubble {
            background-color: #4a5568;
            color: #e2e8f0;
            margin-right: auto;
        }
        .keyword {
            text-decoration: underline;
            color: #63b3ed;
            cursor: pointer;
        }
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            padding: 16px;
        }
        .modal-content {
            background-color: #2d3748;
            padding: 20px;
            border-radius: 8px;
            width: 100%;
            max-width: 500px; /* Default max-width */
            max-height: 90vh; /* Increased max-height slightly */
            overflow-y: auto;
            text-align: left;
            color: #e2e8f0;
        }
        .modal-content.modal-lg { /* For larger modal like Case Summary */
            max-width: 600px;
        }
        .modal-content h3 {
            text-align: center;
            margin-bottom: 16px;
        }
        .story-summary-text {
            font-size: 0.8rem; /* Smaller text for story summary */
        }
        .story-summary-divider {
            border-top: 1px solid #4a5568;
            margin: 12px 0;
        }
        .personality-block {
            background-color: #374151; /* Slightly different background */
            padding: 10px;
            border-radius: 6px;
            margin-top: 10px;
            border: 1px solid #4a5568;
        }
        .tone-button {
            background-color: #4a5568;
            color: #e2e8f0;
            border: 1px solid #718096;
            flex-grow: 1;
            padding: 8px 0;
        }
        .tone-button.active {
            background-color: #3182ce;
            color: white;
            border-color: #3182ce;
        }
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .game-main-area {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 20px); /* Adjusted for padding */
            padding: 8px;
        }
    </style>
</head>
<body class="overscroll-y-contain">
    <div class="game-main-area container mx-auto">
        <header class="text-center mb-3">
            <h1 class="text-2xl sm:text-3xl font-bold text-blue-400">AI 審問遊戲</h1>
            <div class="flex justify-around text-sm sm:text-base mt-1">
                <p>🟢 回合數: <span id="round-count">0</span></p>
                <p>🗣️ 頑抗度: <span id="confession-meter-text">態度強硬</span></p>
            </div>
            <p class="text-xs mt-1" title="這是 Firebase 匿名認證為您的遊戲會話生成的唯一標識，用於保存遊戲進度。">您的 User ID: <span id="user-id-display">載入中...</span></p>
        </header>

        <div class="flex gap-3 mb-3">
            <div id="avatar" class="w-20 h-20 sm:w-24 sm:h-24 bg-gray-600 rounded-full flex-shrink-0 flex items-center justify-center text-gray-400 text-xs sm:text-sm p-1 text-center">
                頭像預留
            </div>
            <div class="flex-grow flex flex-col gap-2 card p-2 text-xs sm:text-sm">
                 <h2 class="text-sm sm:text-base font-semibold mb-1 text-blue-300 text-center">嫌犯狀態</h2>
                 <div id="suspect-status" class="grid grid-cols-2 gap-x-2 gap-y-1">
                    <p>📈<strong>心率:</strong> <span id="heart-rate">75</span> bpm</p>
                    <p>🩸<strong>血壓:</strong> <span id="blood-pressure">120/80</span></p>
                    <p>😠<strong>表情:</strong> <span id="facial-expression" class="italic">讀取中...</span></p>
                    <p>🧍<strong>肢體:</strong> <span id="body-language" class="italic">讀取中...</span></p>
                    <p>🤏<strong>微動作:</strong> <span id="micro-action" class="italic">讀取中...</span></p>
                    <p>🗣️<strong>語氣:</strong> <span id="voice-tone" class="italic">讀取中...</span></p>
                </div>
            </div>
        </div>
        
        <div class="grid grid-cols-2 gap-3 mb-3">
            <button id="show-personal-details-button" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded-md text-sm sm:text-base">👤 個人資料</button>
            <button id="show-story-summary-button" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-3 rounded-md text-sm sm:text-base">📜 案件概要</button>
        </div>


        <div id="dialogue-area" class="dialogue-area mb-3">
            <div class="ai-bubble">你好，警官。有什麼事嗎？</div>
        </div>

        <div class="mt-auto">
            <textarea id="player-input" class="w-full p-2 border border-gray-600 rounded-md bg-gray-700 text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm sm:text-base" rows="2" placeholder="輸入您的問題..."></textarea>
            <div class="mt-2 flex gap-1 sm:gap-2">
                <button class="tone-button active rounded-md text-xs sm:text-sm" data-tone="平緩">😌 平緩</button>
                <button class="tone-button rounded-md ml-1 text-xs sm:text-sm" data-tone="憤怒">😡 憤怒</button>
                <button class="tone-button rounded-md ml-1 text-xs sm:text-sm" data-tone="挑釁">😏 挑釁</button>
            </div>
             <button id="send-button" class="mt-2 w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md transition duration-150 text-sm sm:text-base">
                發送
            </button>
        </div>
    </div>

    <div id="personal-details-modal" class="modal hidden">
        <div class="modal-content">
            <h3 class="text-xl font-bold text-blue-300">👤 嫌犯個人資料</h3>
            <div id="modal-personal-details-content">
                <p><strong>姓名:</strong> <span id="suspect-name-modal">李明</span></p>
                <p><strong>出生年月日:</strong> <span id="dob-modal">讀取中...</span></p>
                <p><strong>星座:</strong> <span id="zodiac-modal">讀取中...</span></p>
                <p><strong>血型:</strong> <span id="blood-type-modal">讀取中...</span></p>
                <p><strong>年紀:</strong> <span id="age-modal">讀取中...</span></p>
                <p><strong>性別:</strong> <span id="gender-modal">讀取中...</span></p>
                <div class="personality-block">
                    <p class="font-semibold mb-1">🎭 個性概述:</p>
                    <p id="personality-modal" class="italic text-sm">讀取中...</p>
                </div>
            </div>
            <button onclick="document.getElementById('personal-details-modal').classList.add('hidden')" class="mt-6 w-full bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-md">關閉</button>
        </div>
    </div>

    <div id="story-summary-modal" class="modal hidden">
        <div class="modal-content modal-lg"> <h3 class="text-xl font-bold text-blue-300">📜 案件概要</h3>
            <div id="modal-story-summary-content" class="story-summary-text">
                <div>
                    <p class="font-semibold">被害人驗屍報告:</p>
                    <span id="autopsy-report-modal"></span>
                </div>
                <hr class="story-summary-divider">
                <div>
                    <p class="font-semibold mt-2">對嫌犯不利的目前證據:</p>
                    <ul id="evidence-list-modal" class="list-disc list-inside ml-4"></ul>
                </div>
                <hr class="story-summary-divider">
                <div>
                    <p class="font-semibold mt-2">嫌犯調查疑點:</p>
                    <ul id="doubts-list-modal" class="list-disc list-inside ml-4"></ul>
                </div>
            </div>
            <button onclick="document.getElementById('story-summary-modal').classList.add('hidden')" class="mt-6 w-full bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-md">關閉</button>
        </div>
    </div>

    <div id="keyword-modal" class="modal hidden">
        <div class="modal-content">
            <h3 id="keyword-modal-title" class="text-xl font-bold text-blue-300">🔑 關鍵字補充</h3>
            <p id="keyword-modal-text">補充內容...</p>
            <div id="keyword-loading-spinner" class="loading-spinner my-4 hidden"></div>
            <button onclick="document.getElementById('keyword-modal').classList.add('hidden')" class="mt-6 w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md">關閉</button>
        </div>
    </div>

    <div id="game-over-modal" class="modal hidden">
        <div class="modal-content text-center">
            <h3 id="game-over-title" class="text-2xl font-bold mb-4">⚖️ 審問結束</h3>
            <p id="game-over-text">AI 已認罪！</p>
            <p>您總共花了 <span id="total-rounds">0</span> 回合。</p>
            <button id="restart-game-button" class="mt-6 bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md">🔄 重新開始</button>
        </div>
    </div>
    
    <div id="ai-thinking-modal" class="modal hidden">
        <div class="modal-content text-center">
            <p class="text-lg">🤖 AI 正在思考回應...</p>
            <div class="loading-spinner my-4"></div>
        </div>
    </div>

    <script type="module">
        // Firebase SDK imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, setPersistence, browserLocalPersistence } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, updateDoc, collection, serverTimestamp, onSnapshot, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // DOM Elements
        const roundCountEl = document.getElementById('round-count');
        const confessionMeterTextEl = document.getElementById('confession-meter-text');
        
        // Suspect Status on main screen
        const heartRateEl = document.getElementById('heart-rate');
        const bloodPressureEl = document.getElementById('blood-pressure');
        const facialExpressionEl = document.getElementById('facial-expression');
        const bodyLanguageEl = document.getElementById('body-language');
        const microActionEl = document.getElementById('micro-action');
        const voiceToneEl = document.getElementById('voice-tone');


        // Modal content for Personal Details
        const suspectNameModalEl = document.getElementById('suspect-name-modal');
        const dobModalEl = document.getElementById('dob-modal');
        const zodiacModalEl = document.getElementById('zodiac-modal');
        const bloodTypeModalEl = document.getElementById('blood-type-modal');
        const ageModalEl = document.getElementById('age-modal');
        const genderModalEl = document.getElementById('gender-modal');
        const personalityModalEl = document.getElementById('personality-modal');

        // Modal content for Story Summary
        const autopsyReportModalEl = document.getElementById('autopsy-report-modal');
        const evidenceListModalEl = document.getElementById('evidence-list-modal');
        const doubtsListModalEl = document.getElementById('doubts-list-modal');

        const showPersonalDetailsButton = document.getElementById('show-personal-details-button');
        const showStorySummaryButton = document.getElementById('show-story-summary-button');
        const personalDetailsModal = document.getElementById('personal-details-modal');
        const storySummaryModal = document.getElementById('story-summary-modal');

        const dialogueAreaEl = document.getElementById('dialogue-area');
        const playerInputEl = document.getElementById('player-input');
        const sendButton = document.getElementById('send-button');
        const toneButtons = document.querySelectorAll('.tone-button');
        const userIdDisplayEl = document.getElementById('user-id-display');

        const keywordModal = document.getElementById('keyword-modal');
        const keywordModalTitle = document.getElementById('keyword-modal-title');
        const keywordModalText = document.getElementById('keyword-modal-text');
        const keywordLoadingSpinner = document.getElementById('keyword-loading-spinner');

        const gameOverModal = document.getElementById('game-over-modal');
        const gameOverTitle = document.getElementById('game-over-title');
        const gameOverText = document.getElementById('game-over-text');
        const totalRoundsEl = document.getElementById('total-rounds');
        const restartGameButton = document.getElementById('restart-game-button');
        const aiThinkingModal = document.getElementById('ai-thinking-modal');

        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "YOUR_API_KEY", authDomain: "YOUR_AUTH_DOMAIN", projectId: "YOUR_PROJECT_ID" };
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);
        setLogLevel('error'); // Changed from debug to error to reduce console noise

        const appId = typeof __app_id !== 'undefined' ? __app_id : 'interrogation-game-default';
        let userId = null;
        let gameId = `game_${Date.now()}`; 
        let gameStateUnsubscribe = null; 

        let gameState = {
            round: 0,
            confessionMeter: 100, // Internal percentage
            suspect: {
                name: "李明", 
                dob: "", zodiac: "", bloodType: "", age: 0, gender: "",
                personality: "讀取中...",
                heartRate: 75, bloodPressure: "120/80", 
                // New observable traits
                facialExpression: "讀取中...",
                bodyLanguage: "讀取中...", // Moved from physiological, now part of observable state
                microAction: "讀取中...",
                voiceTone: "讀取中..."
            },
            caseDetails: {
                autopsyReport: "被害者王小華，女性，35歲，死於頭部遭鈍器重擊，造成顱骨粉碎性骨折。死亡時間推斷為昨晚10點至凌晨1點之間。現場無明顯打鬥痕跡，但有少量掙扎跡象。",
                evidence: [
                    { text: "在被害者家中發現一枚不屬於被害者的<span class='keyword' data-keyword='指紋'>指紋</span>，初步比對與嫌犯部分吻合。", id: "ev1"},
                    { text: "有目擊者聲稱在案發當晚看見與嫌犯體型相似的人在被害者公寓附近徘徊。", id: "ev2"}
                ],
                doubts: [
                    { text: "嫌犯聲稱案發時獨自在家看電影，但無法提供具體電影名稱或內容。", id: "db1"},
                    { text: "嫌犯與被害者曾有商業糾紛，涉及一筆金額不小的款項。", id: "db2"}
                ]
            },
            dialogueHistory: [{ speaker: "AI", text: "你好，警官。有什麼事嗎？" }],
            selectedTone: "平緩",
            gameOver: false
        };
        
        // Function to get text description for confession meter
        function getConfessionMeterText(percentage) {
            if (percentage > 80) return "態度強硬";
            if (percentage > 60) return "故作鎮定";
            if (percentage > 40) return "略顯動搖";
            if (percentage > 20) return "心虛慌亂";
            if (percentage > 0) return "瀕臨崩潰";
            return "已然認罪";
        }

        // Firebase Authentication and Data Handling
        async function initializeGame() {
             try {
                await setPersistence(auth, browserLocalPersistence);
                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) {
                console.error("Authentication error:", error);
                if (error.code === 'auth/invalid-custom-token' || !auth.currentUser) {
                    try { await signInAnonymously(auth); } catch (anonError) {
                        console.error("Anonymous sign-in failed:", anonError);
                        userIdDisplayEl.textContent = "認證失敗"; return;
                    }
                }
            }

            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    userIdDisplayEl.textContent = userId.substring(0,8) + "..."; // Shorten displayed ID for brevity
                } else {
                    userId = `anon_${crypto.randomUUID()}`;
                    userIdDisplayEl.textContent = "匿名訪客";
                }
                await loadOrCreateGameState();
            });
        }
        
        async function getGameDocRef() {
            if (!userId) {
                const tempGameId = `local_game_${Date.now()}`;
                return doc(db, "localGames", tempGameId);
            }
            return doc(db, "artifacts", appId, "users", userId, "interrogationGames", gameId);
        }

        async function loadOrCreateGameState() {
            if (!userId) {
                updateUI(gameState); // Use local state if no user
                await generateInitialSuspectDetailsAndState(); // Generate all initial data
                return;
            }
            const gameDocRef = await getGameDocRef();
            if (gameStateUnsubscribe) gameStateUnsubscribe(); // Unsubscribe from previous listener

            try {
                const docSnap = await getDoc(gameDocRef);
                if (docSnap.exists()) {
                    console.log("Loading existing game state from Firestore for gameId:", gameId);
                    gameState = { ...gameState, ...docSnap.data() }; // Merge, prioritizing Firestore data
                     // Ensure all suspect fields, especially new ones, are present
                    if (!gameState.suspect || !gameState.suspect.dob || !gameState.suspect.facialExpression) {
                        console.log("Suspect details incomplete, regenerating...");
                        await generateInitialSuspectDetailsAndState(); // Regenerate if core or new fields missing
                    }
                } else {
                    console.log("No existing game state found for gameId:", gameId, ". Creating new game state in Firestore.");
                    await generateInitialSuspectDetailsAndState(); // Generate all initial data before saving
                    await setDoc(gameDocRef, { ...gameState, createdAt: serverTimestamp(), lastUpdatedAt: serverTimestamp() });
                }
            } catch (error) {
                console.error("Error loading/creating game state from Firestore:", error);
                // If Firestore fails, use local default state to allow gameplay
                console.warn("Using local game state due to Firestore error.");
                await generateInitialSuspectDetailsAndState();
            }
            
            updateUI(gameState);

            // Set up a real-time listener for game state changes
            gameStateUnsubscribe = onSnapshot(gameDocRef, (docSnapshot) => {
                if (docSnapshot.exists()) {
                    console.log("Game state updated from Firestore:", docSnapshot.data());
                    gameState = { ...gameState, ...docSnapshot.data() };
                     if (!gameState.suspect || !gameState.suspect.dob || !gameState.suspect.facialExpression) {
                        generateInitialSuspectDetailsAndState().then(() => updateUI(gameState));
                    } else {
                        updateUI(gameState);
                    }
                } else {
                    console.log("Game document deleted or does not exist for gameId:", gameId);
                }
            }, (error) => {
                console.error("Error in onSnapshot listener:", error);
            });
        }

        async function saveGameState() {
            if (!userId) {
                console.warn("User ID not available, cannot save game state to Firestore.");
                return; 
            }
            const gameDocRef = await getGameDocRef();
            if (!gameDocRef) return;

            try {
                await setDoc(gameDocRef, { ...gameState, lastUpdatedAt: serverTimestamp() }, { merge: true });
                console.log("Game state saved to Firestore for gameId:", gameId);
            } catch (error) {
                console.error("Error saving game state to Firestore:", error);
            }
        }
        
        // --- DeepSeek API Interaction ---
        const DEEPSEEK_API_KEY = "sk-19179bb0c0c94acaa53ca82dc1d28bbf"; 
        const DEEPSEEK_API_URL = "https://api.deepseek.com/chat/completions";

        async function callDeepSeekAPI(systemPrompt, userPrompt, forMultipleFields = false) {
            aiThinkingModal.classList.remove('hidden');
            const payload = {
                model: "deepseek-chat", 
                messages: [
                    { role: "system", content: systemPrompt },
                    { role: "user", content: userPrompt }
                ],
                stream: false,
                // temperature: 0.7 // Optional: Adjust for creativity if needed
            };

            try {
                const response = await fetch(DEEPSEEK_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
                    },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorBody = await response.text();
                    console.error("DeepSeek API Error Response:", errorBody);
                    throw new Error(`DeepSeek API request failed with status ${response.status}: ${errorBody}`);
                }

                const result = await response.json();
                aiThinkingModal.classList.add('hidden');

                if (result.choices && result.choices.length > 0 && result.choices[0].message && result.choices[0].message.content) {
                    return result.choices[0].message.content;
                } else {
                    console.error("Unexpected DeepSeek API response structure:", result);
                    throw new Error("Unexpected API response structure from DeepSeek.");
                }
            } catch (error) {
                console.error("Error calling DeepSeek API:", error);
                aiThinkingModal.classList.add('hidden');
                // Return a specific structure for multiple fields if an error occurs, or a string for single field
                return forMultipleFields ? { error: error.message } : `AI (DeepSeek) 無法回應 (${error.message.substring(0,30)}...)`;
            }
        }

        // Combined function to generate initial suspect details and their observable state
        async function generateInitialSuspectDetailsAndState() {
            // Generate basic details first
            const genders = ["男性", "女性"];
            gameState.suspect.gender = genders[Math.floor(Math.random() * genders.length)];
            const dobTimestamp = Date.now() - Math.floor(Math.random() * 20 + 20) * 365 * 24 * 60 * 60 * 1000; // Age 20-40
            const birthDate = new Date(dobTimestamp);
            const year = birthDate.getFullYear();
            const month = birthDate.getMonth() + 1;
            const day = birthDate.getDate();
            gameState.suspect.dob = `${year}年${month}月${day}日`;
            gameState.suspect.age = new Date().getFullYear() - year;
            gameState.suspect.zodiac = getZodiacSign(day, month);
            gameState.suspect.bloodType = ["A", "B", "AB", "O"][Math.floor(Math.random() * 4)] + "型";
            // Initialize physiological data with some randomness
            gameState.suspect.heartRate = 70 + Math.floor(Math.random() * 10) -5; // e.g., 65-75
            gameState.suspect.bloodPressure = `${115 + Math.floor(Math.random() * 10) -5}/${75 + Math.floor(Math.random()*10)-5}`; // e.g. 110/70 to 120/80


            const systemPersonalityPrompt = "你是一位遊戲NPC設計師。";
            const userPersonalityPrompt = `請為以下背景的審問遊戲嫌犯生成一段簡短的個性描述（約20-30字）：
            性別：${gameState.suspect.gender}，星座：${gameState.suspect.zodiac}，血型：${gameState.suspect.bloodType}，年齡：${gameState.suspect.age}歲。
            個性描述應簡潔，並暗示其在審問中可能的行為模式。`;
            
            const personalityResponse = await callDeepSeekAPI(systemPersonalityPrompt, userPersonalityPrompt);
            gameState.suspect.personality = (personalityResponse && !personalityResponse.startsWith("AI (DeepSeek) 無法回應")) ? personalityResponse : "難以捉摸，似乎隱藏著什麼。";

            // Then generate initial observable state (can be simpler for initial state)
            const initialObservables = await generateSuspectObservableState("遊戲剛開始，偵訊室氣氛嚴肅。"); // Pass a neutral context
            gameState.suspect.facialExpression = initialObservables.facialExpression || "面無表情";
            gameState.suspect.bodyLanguage = initialObservables.bodyLanguage || "雙手放在桌上";
            gameState.suspect.microAction = initialObservables.microAction || "偶爾眨眼";
            gameState.suspect.voiceTone = initialObservables.voiceTone || "語氣平靜";
        }

        function getZodiacSign(day, month) { 
            const zodiacSigns = [
                { sign: "摩羯座", start: [12, 22], end: [1, 19] }, { sign: "水瓶座", start: [1, 20], end: [2, 18] },
                { sign: "雙魚座", start: [2, 19], end: [3, 20] }, { sign: "白羊座", start: [3, 21], end: [4, 19] },
                { sign: "金牛座", start: [4, 20], end: [5, 20] }, { sign: "雙子座", start: [5, 21], end: [6, 21] },
                { sign: "巨蟹座", start: [6, 22], end: [7, 22] }, { sign: "獅子座", start: [7, 23], end: [8, 22] },
                { sign: "處女座", start: [8, 23], end: [9, 22] }, { sign: "天秤座", start: [9, 23], end: [10, 23] },
                { sign: "天蠍座", start: [10, 24], end: [11, 22] }, { sign: "射手座", start: [11, 23], end: [12, 21] }
            ];
            for (const z of zodiacSigns) {
                if ((month === z.start[0] && day >= z.start[1]) || (month === z.end[0] && day <= z.end[1])) {
                    return z.sign;
                }
            }
            return "未知";
        }

        // Function to get AI's dialogue response
        async function getAIResponse(playerMessage) {
            const evidenceText = gameState.caseDetails.evidence.map(e => e.text.replace(/<[^>]*>/g, "")).join("；");
            const doubtsText = gameState.caseDetails.doubts.map(d => d.text.replace(/<[^>]*>/g, "")).join("；");

            const systemPrompt = `你是謀殺案嫌犯 ${gameState.suspect.name} (個性: ${gameState.suspect.personality})。
            你目前的頑抗度被描述為「${getConfessionMeterText(gameState.confessionMeter)}」。
            生理狀態：心率 ${gameState.suspect.heartRate} bpm，血壓 ${gameState.suspect.bloodPressure}。
            外在表現：表情 ${gameState.suspect.facialExpression}，肢體 ${gameState.suspect.bodyLanguage}，微動作 ${gameState.suspect.microAction}，語氣 ${gameState.suspect.voiceTone}。
            你的目標是盡可能不認罪，但回答要符合你的個性和當前情境。
            如果你的情緒變得激動、慌亂或試圖胡言亂語，你可以用多個簡短的對話框來回應（用 "||" 分隔每個對話框的內容）。
            回答時，如果提到案件相關的關鍵物品或地點（例如：槌子、公寓、公園、刀械、被害者姓名、特定時間點），請在該詞彙前後加上 @@，例如 @@槌子@@。
            你的回答應該簡潔有力。`;
            const userPrompt = `目前對你不利的證據有：${evidenceText}。調查人員對你的疑點是：${doubtsText}。審問者（玩家）用「${gameState.selectedTone}」的語氣問你：「${playerMessage}」`;

            const response = await callDeepSeekAPI(systemPrompt, userPrompt);
            if (response && !response.startsWith("AI (DeepSeek) 無法回應")) {
                return response.split("||").map(r => r.trim());
            }
            return ["我不知道你在說什麼。"]; // Fallback
        }

        // Function to get keyword information
        async function getKeywordInfo(keyword) {
            keywordLoadingSpinner.classList.remove('hidden');
            keywordModalText.textContent = ""; 

            const systemPrompt = "你是一位偵探助手，提供案件線索。";
            const userPrompt = `在一個謀殺案的審問情境中，提到了關鍵字「${keyword}」。請針對這個關鍵字，提供一段簡短（約30-50字）的補充資訊或線索，這段資訊應該對玩家（審問者）有所幫助。例如，如果關鍵字是「槌子」，你可以說：「警方在案發現場找到一把帶有血跡的槌子，上面同時有被害者的DNA和一枚模糊的指紋，正在進行比對。」如果關鍵字是「公園」，你可以說：「根據通訊記錄，被害者手機最後的訊號位置是在城市中央公園附近。」請直接給出補充資訊，不要有額外的開頭或結尾。`;
            
            const info = await callDeepSeekAPI(systemPrompt, userPrompt);
            keywordLoadingSpinner.classList.add('hidden');
            if (info && !info.startsWith("AI (DeepSeek) 無法回應")) {
                keywordModalText.textContent = info;
            } else {
                keywordModalText.textContent = `關於「${keyword}」的更多資訊目前無法取得。`;
            }
        }
        
        // Function to generate suspect's observable state (facial expression, body language, etc.)
        async function generateSuspectObservableState(lastAIMessage = "") {
            const systemPrompt = "你是犯罪心理側寫師。根據提供的嫌犯資料和最近的對話，生成一個JSON格式的對象，描述嫌犯當前的外在表現。";
            const userPrompt = `嫌犯 ${gameState.suspect.name} (個性: ${gameState.suspect.personality})。
            目前心率: ${gameState.suspect.heartRate} bpm，血壓: ${gameState.suspect.bloodPressure} mmHg。
            頑抗度描述為「${getConfessionMeterText(gameState.confessionMeter)}」(內部數值: ${gameState.confessionMeter}%)。
            他剛剛說了 (或被問了): "${lastAIMessage || '偵訊剛開始'}"。
            請生成一個合法的JSON對象，包含以下四個鍵值對，每個值都是一段簡短的描述 (每項約5-10字):
            "facialExpression": (例如："嘴角微微抽動", "眼神有些飄忽不定", "面無表情但眉頭微蹙")
            "bodyLanguage": (例如："雙手緊握放在桌上", "坐立不安，身體稍微後仰", "身體微微前傾，似乎想解釋")
            "microAction": (例如："手指不自覺地輕敲桌面", "下意識撥弄衣角", "短暫地舔了舔嘴唇")
            "voiceTone": (例如："語氣平淡，聽不出情緒", "聲音略顯沙啞", "試圖保持強硬但略帶顫抖")
            確保輸出為一個單一的、合法的JSON對象。`;

            let rawResponse = await callDeepSeekAPI(systemPrompt, userPrompt, true); // true indicates expecting multiple fields (JSON)
            
            try {
                // Attempt to clean the rawResponse if it's a string and contains markdown
                if (typeof rawResponse === 'string') {
                    if (rawResponse.startsWith("```json")) {
                        rawResponse = rawResponse.substring(7); // Remove ```json
                        if (rawResponse.endsWith("```")) {
                            rawResponse = rawResponse.substring(0, rawResponse.length - 3); // Remove ```
                        }
                    }
                    rawResponse = rawResponse.trim(); // Trim any leading/trailing whitespace
                }

                if (rawResponse && typeof rawResponse === 'string' && !rawResponse.startsWith("AI (DeepSeek) 無法回應")) {
                    const parsed = JSON.parse(rawResponse);
                    // Basic validation if parsed is an object with expected keys
                    if (typeof parsed === 'object' && parsed !== null && 
                        'facialExpression' in parsed && 'bodyLanguage' in parsed &&
                        'microAction' in parsed && 'voiceTone' in parsed) {
                        return parsed;
                    } else {
                         console.warn("Parsed JSON for observable state is not in expected format:", parsed);
                         return { 
                            facialExpression: "神情複雜", bodyLanguage: "姿態僵硬", 
                            microAction: "小動作頻頻", voiceTone: "語氣不定" 
                         };
                    }
                } else if (rawResponse && typeof rawResponse === 'object' && rawResponse.error) {
                    // Handle cases where callDeepSeekAPI itself returned an error object
                    console.error("DeepSeek API returned an error object for observable state:", rawResponse.error);
                }
            } catch (e) {
                console.error("Failed to parse observable state JSON from AI:", e, "Cleaned/Raw AI response:", rawResponse);
            }
            // Fallback for API error or parsing failure
            console.warn("Using fallback observable state due to API/parsing error.");
            return { 
                facialExpression: gameState.confessionMeter > 50 ? "鎮定自若" : "略顯緊張",
                bodyLanguage: gameState.confessionMeter > 50 ? "姿態放鬆" : "身體緊繃",
                microAction: gameState.confessionMeter > 50 ? "無明顯小動作" : "手指微微顫抖",
                voiceTone: gameState.confessionMeter > 50 ? "語氣平穩" : "聲音略帶不穩"
            };
        }

        // Function to update suspect's physiological and observable state
        async function updateSuspectStatus(lastAIMessage = "") {
            // Simulate physiological changes (heart rate, blood pressure)
            let hrChange = Math.floor(Math.random() * 10) - 5; // Base change -5 to +4
            let bpSysChange = Math.floor(Math.random() * 10) - 5;
            let bpDiaChange = Math.floor(Math.random() * 6) - 3;

            if (gameState.confessionMeter < 50) { // More stressed if meter is low
                hrChange += Math.floor(Math.random() * (gameState.confessionMeter < 25 ? 10 : 5)) + (gameState.confessionMeter < 25 ? 3 : 2); // Increase more if very low
                bpSysChange += Math.floor(Math.random() * (gameState.confessionMeter < 25 ? 10 : 5)) + (gameState.confessionMeter < 25 ? 3 : 2);
            } else { // Less stressed if meter is high
                 hrChange -= Math.floor(Math.random() * 3); // Slight decrease tendency
                 bpSysChange -= Math.floor(Math.random() * 3);
            }
            gameState.suspect.heartRate = Math.max(60, Math.min(140, gameState.suspect.heartRate + hrChange)); // Clamp values
            let [sys, dia] = gameState.suspect.bloodPressure.split('/').map(Number);
            sys = Math.max(90, Math.min(190, sys + bpSysChange));
            dia = Math.max(60, Math.min(120, dia + bpDiaChange));
            gameState.suspect.bloodPressure = `${sys}/${dia}`;

            // Update observable state (facial expression, body language, etc.) using AI
            const newObservables = await generateSuspectObservableState(lastAIMessage);
            gameState.suspect.facialExpression = newObservables.facialExpression || gameState.suspect.facialExpression; // Use new or keep old if error
            gameState.suspect.bodyLanguage = newObservables.bodyLanguage || gameState.suspect.bodyLanguage;
            gameState.suspect.microAction = newObservables.microAction || gameState.suspect.microAction;
            gameState.suspect.voiceTone = newObservables.voiceTone || gameState.suspect.voiceTone;
        }


        // --- UI Update Functions ---
        function updateUI(state) {
            if (!state) return;
            roundCountEl.textContent = state.round;
            confessionMeterTextEl.textContent = getConfessionMeterText(state.confessionMeter); // Use text description

            // Update suspect status on main screen
            if (state.suspect) {
                heartRateEl.textContent = state.suspect.heartRate;
                bloodPressureEl.textContent = state.suspect.bloodPressure;
                facialExpressionEl.textContent = state.suspect.facialExpression;
                bodyLanguageEl.textContent = state.suspect.bodyLanguage;
                microActionEl.textContent = state.suspect.microAction;
                voiceToneEl.textContent = state.suspect.voiceTone;

                // Update personal details modal content
                suspectNameModalEl.textContent = state.suspect.name;
                dobModalEl.textContent = state.suspect.dob || "N/A";
                zodiacModalEl.textContent = state.suspect.zodiac || "N/A";
                bloodTypeModalEl.textContent = state.suspect.bloodType || "N/A";
                ageModalEl.textContent = state.suspect.age || "N/A";
                genderModalEl.textContent = state.suspect.gender || "N/A";
                personalityModalEl.textContent = state.suspect.personality || "讀取中...";
            }
            
            // Update story summary modal content
            if (state.caseDetails) {
                autopsyReportModalEl.innerHTML = state.caseDetails.autopsyReport.replace(/\n/g, "<br>"); // Handle newlines in autopsy
                evidenceListModalEl.innerHTML = state.caseDetails.evidence.map(e => `<li data-id="${e.id}">${e.text}</li>`).join('');
                doubtsListModalEl.innerHTML = state.caseDetails.doubts.map(d => `<li data-id="${d.id}">${d.text}</li>`).join('');
            }
            
            dialogueAreaEl.innerHTML = ''; 
            if (state.dialogueHistory) {
                state.dialogueHistory.forEach(msg => addMessageToDialogue(msg.speaker, msg.text));
            }

            // Re-attach keyword listeners for modals (evidence/doubts are now in modal)
            document.querySelectorAll('#evidence-list-modal .keyword, #doubts-list-modal .keyword').forEach(el => {
                el.onclick = () => {
                    const keyword = el.dataset.keyword;
                    keywordModalTitle.textContent = `🔑 關於「${keyword}」`;
                    getKeywordInfo(keyword);
                    keywordModal.classList.remove('hidden');
                };
            });

            if (state.gameOver) {
                gameOverTitle.textContent = state.confessionMeter <= 0 ? "⚖️ 審問成功！" : "⚖️ 審問失敗！";
                gameOverText.textContent = state.confessionMeter <= 0 ? `${state.suspect.name} 已認罪！` : `${state.suspect.name} 堅不認罪！`;
                totalRoundsEl.textContent = state.round;
                gameOverModal.classList.remove('hidden');
            } else {
                gameOverModal.classList.add('hidden');
            }
        }

        function addMessageToDialogue(speaker, text) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('dialogue-bubble');
            if (speaker === 'Player') {
                messageDiv.classList.add('player-bubble');
            } else {
                messageDiv.classList.add('ai-bubble');
            }
            const processedText = text.replace(/@@(.*?)@@/g, '<span class="keyword" data-keyword="$1">$1</span>');
            messageDiv.innerHTML = processedText;
            dialogueAreaEl.appendChild(messageDiv);
            dialogueAreaEl.scrollTop = dialogueAreaEl.scrollHeight; 

            messageDiv.querySelectorAll('.keyword').forEach(el => {
                el.onclick = () => {
                    const keyword = el.dataset.keyword;
                    keywordModalTitle.textContent = `🔑 關於「${keyword}」`;
                    getKeywordInfo(keyword); 
                    keywordModal.classList.remove('hidden');
                };
            });
        }

        // --- Game Logic ---
        async function handlePlayerTurn() {
            const playerMessage = playerInputEl.value.trim();
            if (!playerMessage) return;

            sendButton.disabled = true;
            sendButton.innerHTML = '<div class="loading-spinner !w-5 !h-5 border-t-white"></div>';

            gameState.round++;
            addMessageToDialogue('Player', playerMessage);
            gameState.dialogueHistory.push({ speaker: 'Player', text: playerMessage });
            playerInputEl.value = '';

            const aiResponses = await getAIResponse(playerMessage);
            aiResponses.forEach(response => {
                addMessageToDialogue('AI', response);
                gameState.dialogueHistory.push({ speaker: 'AI', text: response });
            });
            
            // Decrease confession meter
            let decrease = 5 + Math.floor(Math.random() * 10); 
            if (gameState.selectedTone === "挑釁" && Math.random() < 0.4) decrease += 5; 
            if (gameState.selectedTone === "憤怒" && Math.random() < 0.2) decrease -= 3; // Anger can backfire
            if (playerMessage.length > 30 && Math.random() < 0.3) decrease +=3; // Slightly shorter length for mobile consideration
            gameState.confessionMeter = Math.max(0, gameState.confessionMeter - decrease);
            
            await updateSuspectStatus(aiResponses.join(" ")); // Update suspect's physiological and observable state

            if (gameState.confessionMeter <= 0) {
                gameState.gameOver = true;
                const confessionMsg = `${gameState.suspect.name}: ...好吧，我承認...是我做的。`;
                addMessageToDialogue('AI', confessionMsg);
                gameState.dialogueHistory.push({ speaker: 'AI', text: confessionMsg });
            }
            
            updateUI(gameState); // Crucial: update UI after all state changes
            await saveGameState();

            sendButton.disabled = false;
            sendButton.innerHTML = '發送';
        }

        function restartGame() {
            gameId = `game_${Date.now()}`; 
            // Preserve some generated details like DOB, name, gender, personality
            const oldSuspectBasicInfo = {
                name: gameState.suspect.name,
                dob: gameState.suspect.dob,
                zodiac: gameState.suspect.zodiac,
                bloodType: gameState.suspect.bloodType,
                age: gameState.suspect.age,
                gender: gameState.suspect.gender,
                personality: gameState.suspect.personality // Keep the generated personality
            };

            gameState = { 
                round: 0, confessionMeter: 100,
                suspect: { 
                    ...oldSuspectBasicInfo, // Use preserved basic info
                    // Reset dynamic states
                    heartRate: 75, bloodPressure: "120/80", 
                    facialExpression: "讀取中...", bodyLanguage: "讀取中...",
                    microAction: "讀取中...", voiceTone: "讀取中..."
                }, 
                caseDetails: { ...gameState.caseDetails }, // Case details are static for now
                dialogueHistory: [{ speaker: "AI", text: "你好，警官。有什麼事嗎？" }],
                selectedTone: "平緩", gameOver: false
            };
            
            // Regenerate only the observable state, personality and basic details are kept
            generateSuspectObservableState("遊戲重新開始。").then(initialObservables => {
                gameState.suspect.facialExpression = initialObservables.facialExpression || "面無表情";
                gameState.suspect.bodyLanguage = initialObservables.bodyLanguage || "雙手放在桌上";
                gameState.suspect.microAction = initialObservables.microAction || "偶爾眨眼";
                gameState.suspect.voiceTone = initialObservables.voiceTone || "語氣平靜";
                loadOrCreateGameState(); // This will effectively create/load the new game doc due to new gameId or reset existing
            });
            gameOverModal.classList.add('hidden');
        }

        // Event Listeners
        sendButton.addEventListener('click', handlePlayerTurn);
        playerInputEl.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault(); handlePlayerTurn();
            }
        });
        toneButtons.forEach(button => {
            button.addEventListener('click', () => {
                toneButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                gameState.selectedTone = button.dataset.tone;
            });
        });
        
        showPersonalDetailsButton.addEventListener('click', () => personalDetailsModal.classList.remove('hidden'));
        showStorySummaryButton.addEventListener('click', () => storySummaryModal.classList.remove('hidden'));
        
        restartGameButton.addEventListener('click', restartGame);

        // Initialize Game
        initializeGame();
    </script>
</body>
</html>
